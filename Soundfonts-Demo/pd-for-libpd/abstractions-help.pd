#N canvas 368 99 1027 652 10;
#X text 900 -40 Pd for LibPd;
#X text 902 -28 Chris Penny;
#X msg 126 190 delete foo;
#X msg 0 382 delete foo;
#X msg 137 382 delete bar;
#X msg 243 382 delete baz;
#X msg 384 371 foo three 3;
#X text -31 -36 [abstractions] - dynamically create & store different
;
#X text 292 -36 subpatches by name.;
#X msg 128 76 init dictionary foo;
#X obj 390 522 abstractions;
#X text -1 339 Initializing and deleting abstractions:;
#X msg 0 359 init dictionary foo;
#X text 385 351 Sending Messages:;
#X msg 627 461 help;
#X msg 626 482 methods;
#X obj 581 127 inlet;
#X obj 581 149 route method1 method2 method3;
#X msg 259 498 test;
#X msg 384 392 foo three;
#X msg 394 433 view;
#X text 43 16 Create a new abstraction:;
#X text 116 37 init <type> <name>;
#X msg 243 359 init evaluate baz;
#X msg 128 135 foo set my_variable 6;
#X text 40 107 Send messages to it:;
#X text 40 167 Delete it:;
#X text 499 -16 To work with [abstractions] \, your subpatch must accept
all input through its left inlet and send all output to the left outlet.
Other inlets & outlets will be ignored.;
#X text 500 42 You can't set the arguments - instead use messages to
the inlet.;
#X text 500 87 You can use [route] to separate output into different
categories:;
#X obj 693 271 print UNKNOWN;
#X obj 540 272 print 1;
#X obj 591 272 print 2;
#X obj 642 272 print 3;
#X obj 609 242 route 1 2 3;
#X msg 609 190 1;
#X msg 642 190 2;
#X msg 674 190 3;
#X msg 707 189 4;
#N canvas 738 328 280 264 example 0;
#X obj 29 14 inlet;
#X obj 75 230 outlet;
#X obj 75 208 list trim;
#X obj 29 48 route 1 2 3;
#X obj 29 129 list prepend 1;
#X obj 84 152 list prepend 2;
#X obj 143 174 list prepend 3;
#X msg 29 85 one;
#X msg 86 85 two;
#X msg 143 85 three;
#X connect 0 0 3 0;
#X connect 2 0 1 0;
#X connect 3 0 7 0;
#X connect 3 1 8 0;
#X connect 3 2 9 0;
#X connect 3 3 1 0;
#X connect 4 0 2 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 4 0;
#X connect 8 0 5 0;
#X connect 9 0 6 0;
#X restore 609 219 pd example;
#X msg 621 372 baz ( 3 ^ 2 ) + ( 4 ^ 2 );
#X msg 621 392 baz e ^ pi;
#X text 39 231 Output is prepended with the abstraction name:;
#X obj 111 264 route foo;
#X obj 111 293 s foo_output;
#X obj 390 545 route foo bar baz;
#X obj 345 577 print FOO;
#X obj 411 577 print BAR;
#X obj 476 577 print BAZ;
#X msg 336 434 reset;
#X msg 137 359 init scales bar;
#X msg 465 372 bar set 2 2 1 2 2 2 1;
#X msg 465 392 bar up;
#X msg 785 373 baz sqrt 2;
#X msg 510 391 bar reset;
#X connect 3 0 10 0;
#X connect 4 0 10 0;
#X connect 5 0 10 0;
#X connect 6 0 10 0;
#X connect 10 0 45 0;
#X connect 12 0 10 0;
#X connect 14 0 10 0;
#X connect 15 0 10 0;
#X connect 16 0 17 0;
#X connect 18 0 10 0;
#X connect 19 0 10 0;
#X connect 20 0 10 0;
#X connect 23 0 10 0;
#X connect 34 0 31 0;
#X connect 34 1 32 0;
#X connect 34 2 33 0;
#X connect 34 3 30 0;
#X connect 35 0 39 0;
#X connect 36 0 39 0;
#X connect 37 0 39 0;
#X connect 38 0 39 0;
#X connect 39 0 34 0;
#X connect 40 0 10 0;
#X connect 41 0 10 0;
#X connect 43 0 44 0;
#X connect 45 0 46 0;
#X connect 45 1 47 0;
#X connect 45 2 48 0;
#X connect 49 0 10 0;
#X connect 50 0 10 0;
#X connect 51 0 10 0;
#X connect 52 0 10 0;
#X connect 53 0 10 0;
#X connect 54 0 10 0;
